class SudokuValidator:
    def _init_(self, board, custom_zones):
        self.board = board
        self.custom_zones = custom_zones

    def is_valid(self):
        return (self.check_rows() and
                self.check_columns() and
                self.check_squares() and
                self.check_custom_zones())

    def check_rows(self):
        for row in self.board:
            if not self.is_unique(row):
                return False
        return True

    def check_columns(self):
        for col in range(9):
            if not self.is_unique([self.board[row][col] for row in range(9)]):
                return False
        return True

    def check_squares(self):
        for i in range(3):
            for j in range(3):
                square = [self.board[x][y] for x in range(i*3, (i+1)*3) for y in range(j*3, (j+1)*3)]
                if not self.is_unique(square):
                    return False
        return True

    def check_custom_zones(self):
        for zone in self.custom_zones:
            cells = [self.board[x][y] for x, y in zone]
            if not self.is_unique(cells):
                return False
        return True

    def is_unique(self, lst):
        nums = [num for num in lst if num != 0]
        return len(nums) == len(set(nums))

# Test case
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

custom_zones = [
    [(0, 0), (0, 1), (1, 0), (1, 1)],  # Custom zone example
    # Add more custom zones as needed
]

validator = SudokuValidator(board, custom_zones)
print(validator.is_valid())  # Output: True or False
